<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dev-C++</title>
      <link href="/2019/04/16/Dev-C/"/>
      <url>/2019/04/16/Dev-C/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>Dev-C++是一个SourceForge的项目，早已停止更新。</p><p>安装过程中的语言没有中文选项，选择English即可，按照默认选项安装。首次运行时，选择<strong>使用软件时的语言</strong>为简体中文即可，按照默认选项完成初运行配置。</p><hr><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>菜单栏 - 工具 - 编辑器选项 - 语法 - 预设 - Obsidian 黑曜石主题</li></ul><p><img src="https://i.loli.net/2019/04/16/5cb598b4cba28.png" alt="工具 - 编辑器选项"></p><p><img src="https://i.loli.net/2019/04/16/5cb599bfef712.png" alt="语法 - 预设 - Obsidian 黑曜石主题"></p><ul><li><p>菜单栏 - 工具 - 编辑器选项 - 基本</p><ul><li style="list-style: none"><input type="checkbox" checked> 显示编辑器提示</li><li style="list-style: none"><input type="checkbox" checked> 显示函数提示</li><li>高亮显示当前行 - 色彩 - Black</li></ul><p><img src="https://i.loli.net/2019/04/16/5cb59bb680afc.png" alt></p></li></ul><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>菜单栏 - 工具 - 编辑器选项 - 显示 - 字体 - YaHei Consolas Hybrid</p><p>字体下载： <a href="https://pan.baidu.com/s/1kldCHl7A5SIZaCLJniLzwQ" target="_blank" rel="noopener"><a href="https://pan.baidu.com/s/1kldCHl7A5SIZaCLJniLzwQ" target="_blank" rel="noopener">Consolas和微软雅黑混合字体</a></a></p><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>自动整理代码</td><td>Ctrl + Shift + A</td></tr><tr><td>代码补全</td><td>Ctrl + Space(<strong>和输入法切换快捷键冲突</strong>)</td></tr></tbody></table><p>自定义快捷键：工具 - 快捷键选项 - 菜单项的底部 - Show Code Completion(代码补全)，自定义即可。</p><hr><h2 id="支持C99标准"><a href="#支持C99标准" class="headerlink" title="支持C99标准"></a>支持C99标准</h2><p>工具 - 编译选项 - 编译时加入以下命令 - <code>-std=c99</code></p><p><img src="https://i.loli.net/2019/04/16/5cb59e4d63a98.png" alt></p><hr><p>参考：</p><ul><li><a href="https://ice1000.org/2016/10/28/DevCpp/" target="_blank" rel="noopener">如何正确使用 DEV C++</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统与软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev-C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香港两日半 | 不妨长作岭南人</title>
      <link href="/2019/03/25/%E9%A6%99%E6%B8%AF%E6%B8%B8%E8%AE%B0/"/>
      <url>/2019/03/25/%E9%A6%99%E6%B8%AF%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Vlog"><a href="#Vlog" class="headerlink" title="Vlog"></a>Vlog</h2><iframe frameborder="0" width="640" height="498" src="https://sv1.doubanio.com/201903291450/3eb59d5c0395f591f0595207897d340e/status/2019/3/iiVDtgdz748mdXrqFvCoyQ.mp4" allowfullscreen></iframe><hr><h2 id="情之所起"><a href="#情之所起" class="headerlink" title="情之所起"></a>情之所起</h2><p>说起香港，脑海中闪过的第一个念头就是《重庆森林》——重庆大厦里奔走的林青霞、趴在半山扶梯上窥看编号633住处的王菲和她哼唱的《California Dreamin’》。终于要去见识这个憧憬太久的目的地了啊。</p><p>准备用完整的两天时间游览香港，从杭州出发，在三种方案中做选择： </p><ol><li>飞机直飞香港 （香港机场，位置较偏，根据实时价格、抵达时间综合考虑）</li><li>高铁直达香港（西九龙高铁站，高价、抵达时间深夜）</li><li>火车到<strong>深圳站</strong>，无缝衔接<strong>罗湖关口</strong>（硬卧￥360+ ~ ￥400，当天下午出发，隔天早上6点多或8点多抵达深圳站）</li></ol><p>由于勤(shi)俭(ge)节(qiong)约(bi)，同时为了能最大化利用在港时间，选择了方案3，买了03月19日的15:17杭州东站出发的T101次硬卧中铺，03月20日08:15抵达深圳站。03月22日16:00深圳站返程。</p><p>以及如下准备：  </p><ul><li style="list-style: none"><input type="checkbox" checked> 带上身份证去办港澳通行证（￥80）+ 香港团队旅游签注（￥15，<strong>现在团签可自助过关，与个签没有分别</strong>；7个工作日出证）  </li><li style="list-style: none"><input type="checkbox" checked> 去中国银行兑换1000港币  </li><li style="list-style: none"><input type="checkbox" checked> 买好路上的干粮</li><li style="list-style: none"><input type="checkbox" checked> 备好北纬22°所需衣物</li><li style="list-style: none"><input type="checkbox" checked> 预订酒店（一般酒店都备有转换插头，无需自带）</li><li style="list-style: none"><input type="checkbox" checked> 根据个人需求：淘宝买香港的x日电话卡；或在手机自带的全球上网一类app上购买流量包</li></ul><p><strong>冲冲冲！</strong></p><hr><h2 id="DAY-1"><a href="#DAY-1" class="headerlink" title="DAY 1"></a>DAY 1</h2><p>一夜的火车，从北纬30°到北纬22°，20+℃的气温暗示着夏天的气息。换上短袖，跟着指示牌前往关口。</p><p><img src="https://i.loli.net/2019/03/27/5c9b65af74dc6.jpeg" alt="标识牌"></p><p><img src="https://i.loli.net/2019/03/29/5c9db75b6307e.jpeg" alt="标识牌"></p><p>自助过关，机器读取港澳通行证，人脸+指纹识别后出内地关口，再经香港的检查人员核实身份后，即可入关。</p><p><img src="https://i.loli.net/2019/03/29/5c9db7a38f91a.jpeg" alt="自助查验标识"></p><p><img src="https://i.loli.net/2019/03/29/5c9db7cb6463a.jpeg" alt></p><p><img src="https://i.loli.net/2019/03/29/5c9db7e0dd89f.jpeg" alt></p><p>过关之后，先去柜台办了一张八达通，把1000港币破开。接着跟着标识牌去羅湖站坐港铁MTR。上了地铁以后，一看手机果然没有信号了，启用购买的流量包，在墙外的Internet上尽情呼吸。</p><h3 id="第一站-大學"><a href="#第一站-大學" class="headerlink" title="第一站 大學"></a>第一站 大學</h3><p><img src="http://p1-q.mafengwo.net/s13/M00/D4/7C/wKgEaVybmLqAcKOZAAj0436BHXM79.jpeg" alt="大學站"></p><p>大學站所指的大學是<strong>香港中文大學</strong>，一出地铁站就可以出现在校园之内。在香港中文大學可以初窥香港的地形，依山而建、高低错落，似极了重庆，对重庆曾经的小香港别称有了一丝恍然。来香港中文大學主要是为了打卡景点<strong>天人合一</strong>，顺便感受一下高等学府的环境与氛围。</p><p>校内有免费大巴可以乘坐，坐上可到<strong>新亚学院</strong>的车次，天人合一便只有几步之遥。</p><p>我以为能拍到的天人合一 和 我实际上拍到的天人合一……</p><p><img src="http://p2-q.mafengwo.net/s13/M00/15/90/wKgEaVybrXWAEF5lAA2DIiXf-E829.jpeg" alt="天人合一"></p><p>校园角落：</p><p><img src="http://p3-q.mafengwo.net/s13/M00/DA/16/wKgEaVybm9-AOh6xABCfboRpnSc44.jpeg" alt></p><p><img src="http://n3-q.mafengwo.net/s13/M00/DA/1C/wKgEaVybm-KAckzIAA5ElX33Oes68.jpeg" alt></p><p><img src="http://n4-q.mafengwo.net/s13/M00/DA/22/wKgEaVybm-WAPVXZABLFqn7fKRA87.jpeg" alt="头脑特工队"></p><p><img src="http://n1-q.mafengwo.net/s13/M00/DA/2A/wKgEaVybm-mAenGvABy4pAOS__I08.jpeg" alt="巴士站点的宝可梦装饰"></p><p><img src="https://i.loli.net/2019/03/29/5c9dba427e1d0.jpeg" alt="校园里很容易发现的宝可梦元素"></p><p><img src="http://p3-q.mafengwo.net/s13/M00/D5/6A/wKgEaVybmUaAOfqXAB-iQlRulA098.jpeg" alt></p><p>香港的车道上总会印着慢駛，斑马线上总会印着望左或望右，当我们在说城市的人文关怀的时候，我们在说什么：</p><p><img src="https://i.loli.net/2019/03/29/5c9dbd1e0f31c.jpeg" alt></p><p><img src="http://b1-q.mafengwo.net/s13/M00/D5/51/wKgEaVybmT2AWbyIAB88o5XJexk61.jpeg" alt="img"></p><hr><h3 id="第二站-彩虹"><a href="#第二站-彩虹" class="headerlink" title="第二站 彩虹"></a>第二站 彩虹</h3><p><img src="http://b4-q.mafengwo.net/s13/M00/DA/EC/wKgEaVybnGiATIJBABrUlqkj9j080.jpeg" alt="彩虹站"></p><p>逛完香港中文大學之后，继续坐上开往紅磡方向的東鐡綫，经由九龍塘换乘开往調景嶺方向的觀塘綫，在彩虹站下车，C3/C4口出站，<del>跟着感觉走就到了打卡点</del>跟着导航找到一个三层的<strong>停车楼</strong>，走上楼就到了彩虹邨的天台球场打卡点。</p><p><img src="http://n4-q.mafengwo.net/s13/M00/21/3A/wKgEaVyYpPWASCoxABbKpJXZH7g06.jpeg" alt></p><p>坪石邨就在彩虹邨附近，一并打卡。</p><p><img src="http://p2-q.mafengwo.net/s13/M00/21/47/wKgEaVyYpQKAX3IQABkI976-WGg74.jpeg" alt></p><hr><h3 id="第三站-旺角"><a href="#第三站-旺角" class="headerlink" title="第三站 旺角"></a>第三站 旺角</h3><p><img src="http://p1-q.mafengwo.net/s13/M00/DD/68/wKgEaVybnhWAfe3tAA8QRIHaSp453.jpeg" alt></p><p>预订的酒店在旺角站附近的新興大厦，12点多到酒店登记，接待的前台一口甜软的台湾腔，仿佛服务上升了一个台阶，因为两点之后房间才能清理好，把行李暂存到前台之后出门觅食。</p><p>奥海城有一家轮胎一星的添好運点心专门店，有点路，但也可以顺便熟悉一下市区，就慢慢摇过去。香港的红绿灯还有喇叭播放的摇铃提醒，通过不同的节奏来提供听觉上的交通信号。当我们在说城市设计的时候，我们在说什么。这家添好運不在商场内部，而是外围的街边店，用普通话取了号，但店员在叫号的时候只用粤语，结果就过号了Orz…最终跟另外一家口拼了一桌，得以入座。点了酥皮叉烧包、虾饺、牛肉肠粉，满足。</p><p>吃完之后，去逛香港特色的“二楼书店”。寸土寸金的香港，小众的个体书店隐匿于窄小楼梯通往的上层楼层，西洋菜街分布着多家二楼书店，这个时候导航显得十分无力<del>，果然还是要跟着感觉走</del>。有一定年头的旧式电梯和陈旧的楼道已经相辅相成，一迈进逼仄的楼道，隔着喧闹的街市，年代感迎面而来。</p><p>走在街道上，正巧看到宣扬法轮功和抵制邪教的横幅只有一布之隔，各自发声。下意识感慨神奇，心生羡慕。</p><p>最终在商务印书馆找到了想买的书，外面世界的书真不便宜。如果国内能出版的话，最多￥30+应该就能买到，不过可以理解成出版自由的附加值来抚慰自己，以及感谢支付宝的境外推广活动。</p><h3 id="第四站-尖沙咀"><a href="#第四站-尖沙咀" class="headerlink" title="第四站 尖沙咀"></a>第四站 尖沙咀</h3><p>逛完书店，回到住处入住了房间。躺下来补充一下体力之后，出门地铁前往尖沙咀。因为一心想趁着天还亮着，去拍香港文化中心，没有注意就在尖沙咀站附近的重庆大厦。走了一段距离，就走到了香港文化中心。</p><p>维港一瞥：</p><p>然后由西到东走了一遍星光大道，走马观花了一遍著名港星的手印和简介。麦兜作为出现在星光大道上的唯一卡通形象，“木有鱼丸，木有粗面”的麦兜在香港的地位可见一斑，虽然是在愚人节之前来香港，但猪年看到出乎意料的麦兜也算应景。</p><p>逛完了星光大道，想着走回尖沙咀站打卡重庆大厦。走进重庆大厦，一股闷热感和走动的印度面孔让人感慨电影中的重庆大厦的相关画面，但如今与当初相比，治安和清洁方面该是好了很多，其中实在逛无可逛。看了下地图，发现恰好有一家蘭芳園在重庆大厦负一层。但是不能被重庆大厦的入口所迷惑，因为走进重庆大厦的正门却没有走到负一层的路。只需在街道上往北走上几步路，就能看到地下入口。</p><p>点了丝袜奶茶和猪扒包</p><p>一起拼桌的两位，一位是港人、一位是白人，两人用粤语无障碍交流着，在个别词汇无法表达时，会夹杂着些许英语。在香港这样一个文化如此多元的地域，你很难不被多元的语言交流所感染。正吃着饭，一位内地游客看着我们这桌有一张空着的凳子，便用普通话问白人小哥：“这个位置有人坐吗？”白人小哥停下交流，回头一瞥，同样用普通话回答道：“呃…没有。”不禁感叹白人小哥真的有、东西。吃完晚饭，准备起身结账时，不小心撞了一下桌子，把拼桌两位的饮料洒了一些出来，脑海中瞬间闪过一个念头：“我该说sorry还是对唔住还是唔好意思？”结果怂怂地用普通话说了两句：“不好意思”…</p><p>吃完饭出来天色已暗，不逛诚品，不足以谈人生？诚品书店名声在外，听了太多年，正好海港城有分店，就去逛了逛。逛过之后，才明白逛诚品书店为什么能消磨时间，想来算是个商场中的商场。</p><h3 id="第五站-跑馬地赛马场"><a href="#第五站-跑馬地赛马场" class="headerlink" title="第五站 跑馬地赛马场"></a>第五站 跑馬地赛马场</h3><p>逛完诚品，走向天星碼头，坐天星小轮到对岸，再去跑馬地馬场看每周三的赛马。原本想坐到湾仔碼头（莫名想吃水饺…），一不留神坐上了去往中环碼头的轮渡。</p><p>在天星小轮上一赏维港夜景：</p><p>到达对岸之后，前往公交站，坐上去跑馬地馬场的巴士。到站后发现，票价港币$10的<strong>公众入口只有G口</strong>，还需要往南走上一段路。刷八达通即可入场感受人声鼎沸、灯火通明的香港赌马文化。其中酒水餐饮一应俱全，不得不感叹赛马的魅力。</p><h3 id="第六站-廟街"><a href="#第六站-廟街" class="headerlink" title="第六站 廟街"></a>第六站 廟街</h3><p>看完一场赛马之后，准备坐巴士去廟街。巴士的站点正好在一座印度廟前，正好遇到当天仪式的印度人一家又一家地从中走出，再次感叹文化的多元。廟街不如想象中的热闹，想到极限挑战好想在这里取过景。一家家街角的大排档确实有让人想一尝的想法，但是单人旅途确实和大排档不合适。笔直的廟街中间是搭起棚子的贩卖各色饰品、服装、玩具纪念品的小摊贩，两侧的商铺则有形形色色的食铺、覆上帘子的成人影片店铺，还能看到几位穿着暴露的性服务者… 最后，找到了拍廟街远景的停车楼，我想象中能拍到的廟街 和 我实际上拍到的廟街：</p><p>在麥文記麺家吃了一碗云吞面作宵夜，好像就是running man去吃过的那家。</p><p>走了3万步的一天终于结束了…</p><hr><h2 id="DAY-2"><a href="#DAY-2" class="headerlink" title="DAY 2"></a>DAY 2</h2><h3 id="第七站-翠园金華冰厅"><a href="#第七站-翠园金華冰厅" class="headerlink" title="第七站 翠园金華冰厅"></a>第七站 <del>翠园</del>金華冰厅</h3><p>原本想去翠园（旺角新世纪广场店）吃早茶，在路上找到一片涂鸦墙，真好啊。</p><p>10点多找到店铺后，排号的人已不少，感觉不一定能在11：30前的早茶时间吃完，遂作罢。正好发现金華冰厅就在附近，<del>屁颠屁颠</del>走到店里，点了菠萝油和冻奶茶，菠萝油也太好吃了8？！</p><h3 id="第八站-香港大學"><a href="#第八站-香港大學" class="headerlink" title="第八站 香港大學"></a>第八站 香港大學</h3><p>Pillar of Shame</p><h3 id="第九站-半山扶梯"><a href="#第九站-半山扶梯" class="headerlink" title="第九站 半山扶梯"></a>第九站 半山扶梯</h3><p>原本应该从香港大學出发去卢吉道，但是Google地图用不惯……高德的导航没有给出一个合适的路线，只好曲线救国，先去打卡半山扶梯。</p><p>太平山街周边的涂鸦</p><p>拍了皇后大道、皇后大道西、皇后大道中，最后没有去打卡一下皇后大道东，<del>算了反正都没有皇宫</del>。</p><p>想不起来是先去吃的翠華餐廰还是先逛的半山扶梯。去翠華吃了咖喱牛腩饭和冻鸳鸯。</p><p>半山扶梯</p><h3 id="第十站-太平山顶"><a href="#第十站-太平山顶" class="headerlink" title="第十站 太平山顶"></a>第十站 太平山顶</h3><p><del>智障级徒步曲线爬坡，无数次感慨这就是重庆地形</del>登上凌霄阁观景台，真真正正的一滴都没有了。走了一段卢吉道，回想李尚敏坐红眼航班登卢吉道看香港日出的片段之后，排队缆车下山。</p><h3 id="第十一站-幻彩咏香江"><a href="#第十一站-幻彩咏香江" class="headerlink" title="第十一站 幻彩咏香江"></a>第十一站 <del>幻彩咏香江</del></h3><p>坐巴士去再興燒臘飯店，点了叉烧饭和鱼蛋菜汤。鱼蛋菜汤加了猪油，味道香浓。最后光盘行动…得到了老板娘“好靓仔”的夸奖…</p><p>拖着一滴都没有了的残躯，想去湾仔碼头的观景台看夜景。在8点过几分之后到达，发现是幻彩咏香江的盲区…香港岛这一侧的灯光是主体部分，在湾仔碼头却完美地被建筑遮挡，无法看到。后来发现就在碼头左侧的金紫荆广场应该是香港岛这一侧的优质观景位置。金紫荆广场上有着许多的香港动漫人物的塑像，如步惊云、陈浩南及许多卡通式人物，和对岸的星光大道有遥相呼应的味道。</p><p>从湾仔站打道回府，结束因徒步太平山而被掏空的一天…</p><hr><h2 id="DAY-3"><a href="#DAY-3" class="headerlink" title="DAY 3"></a>DAY 3</h2><h3 id="第十二站-翠园早茶"><a href="#第十二站-翠园早茶" class="headerlink" title="第十二站 翠园早茶"></a>第十二站 翠园早茶</h3><p>稍微比昨天早一点到了翠园，取号之后马上被叫到了号，如愿以偿吃上早茶。龙井+凤爪+豉汁蒸排骨+瑶柱灌汤饺。我对茶餐厅真的没有抵抗力啊…</p><h3 id="第十三站-买买买"><a href="#第十三站-买买买" class="headerlink" title="第十三站 买买买"></a>第十三站 买买买</h3><p>找了一家卖美国保健品的店铺，其中一个店员只会粤语和英语，结账时，为脑子里能出现checkout而感到欣慰… 赶在12点的退房时间前整理好行李退房 。屈臣氏、万宁、莎莎、卓悦等等不表…</p><h3 id="第十四站-重回香港中文大學"><a href="#第十四站-重回香港中文大學" class="headerlink" title="第十四站 重回香港中文大學"></a>第十四站 重回香港中文大學</h3><p>买好必需品后，乘上返程的地铁，想着适合解决午饭的地点。于是又回到开始的地方，轻车熟路去了众志堂食堂，自助点餐冻柠茶+烧味双拼饭后，八达通付款，吃完了在香港的最后一顿，Happy Ending。</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>过关安检、15:00进深圳站。返程的火车上，一群上海老年旅游团好不闹热，其乐融融的气氛能很好地感染他人。</p><p>遇到一个在义乌做生意的60岁韩国大叔。用我蹩脚的韩语+英语表达了我对running man、无限挑战、2天1夜的喜爱之情，尝了他分享的海苔。大叔说自己在中国吃面只吃打着新疆招牌的面和温州海鲜面哈哈哈。</p>]]></content>
      
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>优雅使用Windows 10</title>
      <link href="/2019/03/18/%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8Windows-10/"/>
      <url>/2019/03/18/%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8Windows-10/</url>
      
        <content type="html"><![CDATA[<h2 id="桌面效果图"><a href="#桌面效果图" class="headerlink" title="桌面效果图"></a>桌面效果图</h2><p><img src="https://i.loli.net/2019/03/28/5c9c986753d63.png" alt="Win 10桌面"></p><hr><h2 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h2><ul><li>PDF阅读器： <a href="https://www.gaaiho.com/index.php/zh-cn/products/reader/pdf-reader-pc/overview" target="_blank" rel="noopener">文电通PDF阅读器</a></li><li>视频播放器：<a href="https://daumpotplayer.com/download/" target="_blank" rel="noopener">PotPlayer</a></li><li>广告拦截：<a href="http://www.admflt.com/" target="_blank" rel="noopener">阿呆喵</a></li><li>解压缩软件：<a href="https://cn.bandisoft.com/bandizip/" target="_blank" rel="noopener">Bandizip</a></li><li>百度网盘全速下载：<a href="https://pandownload.com/" target="_blank" rel="noopener">PanDownload</a></li><li>UWP：DailyPic(Bing的每日壁纸，可选择性下载中意的壁纸作为桌面背景)</li></ul><hr><h2 id="系统速度优化"><a href="#系统速度优化" class="headerlink" title="系统速度优化"></a>系统速度优化</h2><p><code>Ctrl + alt + Esc</code>打开任务管理器 - 启动 - 选择需要禁用的开机启动项</p><hr><h2 id="任务栏透明化"><a href="#任务栏透明化" class="headerlink" title="任务栏透明化"></a>任务栏透明化</h2><p>Microsoft Store下载<strong>TranslucentTB</strong>，启动。</p><ul><li><strong>Open at boot</strong>(开机启动)</li><li><strong>Regular - Clear</strong>（常规 - 透明）</li></ul><hr><h2 id="滑动关机"><a href="#滑动关机" class="headerlink" title="滑动关机"></a>滑动关机</h2><ol><li><code>Win + S</code>唤出Cortana，搜索<code>SlideToShutdown</code>，选择打开文件位置</li><li>右键 - 发送到 - 桌面快捷方式</li><li>右键 - 属性 - 快捷键，自定义滑动关机快捷键，如<code>Ctrl + Alt + 1</code></li><li>如果想将滑动关机固定到任务栏，见<a href="#Win-10-风格图标">Win 10 风格图标</a></li></ol><hr><h2 id="Win-10-风格图标"><a href="#Win-10-风格图标" class="headerlink" title="Win 10 风格图标"></a>Win 10 风格图标</h2><p>注：仅适用于PC端软件，UWP应用不可用。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>图标素材网站：<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a>；<a href="https://www.easyicon.net/" target="_blank" rel="noopener">easyicon</a></li><li>PNG格式图标在线转为ico格式图标网站：<a href="https://www.easyicon.net/covert/" target="_blank" rel="noopener">iconvert</a></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>找到需要转换图标的软件快捷方式（如果不是快捷方式，右键 - 发送到 - 桌面快捷方式，统一进行转换）</li><li>在素材网站筛选合适的图标，选择下载<strong>白色</strong>的PNG格式图标</li><li>将图标转为ico格式，下载统一存放（便于管理）</li><li>右键软件快捷方式 - 属性 - 更改图标 - 浏览 - 在ico图标存放地址选择相应图标 - 确定</li><li>右键软件快捷方式 - 固定到任务栏</li><li>删除桌面上的软件快捷方式</li></ol><hr><h2 id="任务栏图标居中"><a href="#任务栏图标居中" class="headerlink" title="任务栏图标居中"></a>任务栏图标居中</h2><ol><li>桌面新建文件夹</li><li>右键任务栏空白处 - <strong>取消勾选</strong>锁定任务栏</li><li>右键任务栏空白处 - 工具栏 - 新建工具栏 - 选择桌面新建的文件夹</li><li>向左拖动新建的工具栏，将应用程序栏挤到右侧</li><li>右键新建的工具栏 - <strong>取消勾选</strong> 显示文本 和 显示标题</li><li>将应用程序栏拖拽到合适的位置后，锁定任务栏</li></ol><hr><h2 id="桌面的系统相关图标隐藏"><a href="#桌面的系统相关图标隐藏" class="headerlink" title="桌面的系统相关图标隐藏"></a>桌面的系统相关图标隐藏</h2><p><code>Win + i</code>打开设置 - 个性化 - 主题 - 相关的设置 - 桌面图标设置 - 取消勾选相应图标即可隐藏</p><hr><h2 id="资源管理器像浏览器一样使用Tab标签页"><a href="#资源管理器像浏览器一样使用Tab标签页" class="headerlink" title="资源管理器像浏览器一样使用Tab标签页"></a>资源管理器像浏览器一样使用Tab标签页</h2><ol><li>下载安装<a href="http://qttabbar.wikidot.com/" target="_blank" rel="noopener">QTTabBar</a></li><li><code>Win + E</code>打开资源管理器，查看 - 选项 - 勾选GTTabBar(注：选项按钮上方的默认图形只是选项的其中一项，<strong>需点击选项文字</strong>)，此时资源管理器就多出了标签栏</li><li>右键标签栏空白处 - QTTabBar Options - General - Download language file - 选择更新日期较近的简体中文（注：<strong>下载语言文件需要科学上网</strong>，附<a href="https://pan.baidu.com/s/1mc2Ubnh5JfEoELu5EnIKTg" target="_blank" rel="noopener">百度网盘资源</a>）- apply即可汉化</li><li>标签栏的”+”按钮默认为<strong>浏览文件夹并打开新标签</strong>，比较麻烦。右键标签栏空白处 - QTTabBar 选项 - 鼠标事件 - 标签和标签栏 - 点击标签栏的”+”按钮 - 用户命令 - 创建一个新命令 - 命令的类型 - 文件和文件夹 - 路径（根据个人喜好选择默认打开路径）</li><li>按照个人喜好调整功能</li></ol><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">Win + 数字</td><td style="text-align:left">对应任务栏从左到右固定的程序</td></tr><tr><td style="text-align:left">Win + A</td><td style="text-align:left">通知中心</td></tr><tr><td style="text-align:left">Win + L</td><td style="text-align:left">锁屏</td></tr><tr><td style="text-align:left">Win + D</td><td style="text-align:left">回到桌面/当前界面</td></tr><tr><td style="text-align:left">Win + W</td><td style="text-align:left">WINDOWS INK 工作区</td></tr><tr><td style="text-align:left">Win + - ( + )</td><td style="text-align:left">放大镜</td></tr><tr><td style="text-align:left">Win + Q/S</td><td style="text-align:left">Cortana</td></tr><tr><td style="text-align:left">Win + E</td><td style="text-align:left">文件资源管理器</td></tr><tr><td style="text-align:left">Win + I</td><td style="text-align:left">Windows 设置</td></tr><tr><td style="text-align:left">Win + K</td><td style="text-align:left">蓝牙</td></tr><tr><td style="text-align:left">Ctrl + Alt + Esc</td><td style="text-align:left">任务管理器</td></tr><tr><td style="text-align:left">Win + Ctrl + ⬅/➡</td><td style="text-align:left">切换至相邻的虚拟桌面</td></tr><tr><td style="text-align:left">Win + Shift + S</td><td style="text-align:left">可框选截图</td></tr><tr><td style="text-align:left">Win + Printscreen</td><td style="text-align:left">全屏截图</td></tr></tbody></table><hr><h2 id="触摸板手势"><a href="#触摸板手势" class="headerlink" title="触摸板手势"></a>触摸板手势</h2><table><thead><tr><th>手势</th><th>功能</th></tr></thead><tbody><tr><td>单指点击两次 + 拖动</td><td>多选</td></tr><tr><td>两指拖动</td><td>滚动页面</td></tr><tr><td>两指捏合</td><td>缩放</td></tr><tr><td>三指上滑</td><td>多任务视图</td></tr><tr><td>三指下滑</td><td>显示桌面</td></tr><tr><td>三指左右滑动</td><td>切换应用</td></tr><tr><td>三指单击</td><td>唤出Cortana</td></tr><tr><td>四指单击</td><td>通知中心</td></tr><tr><td>四指左右滑动</td><td>切换虚拟桌面</td></tr></tbody></table><hr><p>参考：</p><ul><li><a href="https://blog.csdn.net/yourng/article/details/83013726" target="_blank" rel="noopener">QTTabBar 简单配置</a></li><li><a href="https://sspai.com/post/45594" target="_blank" rel="noopener">Windows 虚拟桌面的高效启动技巧</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统与软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新笔记本电脑验机</title>
      <link href="/2019/03/18/%E6%96%B0%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91%E9%AA%8C%E6%9C%BA/"/>
      <url>/2019/03/18/%E6%96%B0%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91%E9%AA%8C%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>准备：下载<strong>卡硬工具箱免安装版</strong>至U盘或其他移动设备。</p><p><strong>以下任何一步有问题，退货。</strong></p><ol><li>检查笔记本外壳是否有<strong>指纹、裂痕、凹陷</strong>，机身是否有<strong>变形</strong>，屏幕是否<strong>完好</strong>。</li><li>USB接口是否有抽插痕迹。</li><li><strong>不插电源，直接按电源键</strong>，若<strong>能开机，则很可能是二手</strong>。</li><li>插上电源，按电源键开机。</li><li>进入系统，系统初始化设置（<strong>若没有设置界面，直接进入了系统，二手</strong>）。</li><li><strong>不连接网络</strong>，防止后续检查有问题无法退货。</li><li>进入桌面后，插上有卡硬工具箱的U盘。<ol><li>显示器工具 - 检测屏幕坏点。</li><li>硬盘工具 - Diskinfo - 检查通电次数和通电时间（<strong>一般通电时间在24小时内，通电次数在150次以内，可以判定为新机硬盘</strong>）。</li></ol></li></ol><p><strong>上述步骤没有出现问题后，依然不要联网，在无理由退货时间内使用电脑，以便后续使用不满意时方便退货。</strong></p><hr><p>参考：<a href="https://zhuanlan.zhihu.com/p/40181275" target="_blank" rel="noopener">笔记本电脑验机指南</a></p>]]></content>
      
      
      <categories>
          
          <category> 验机与续命 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联想Y480拆机清灰</title>
      <link href="/2019/03/18/%E8%81%94%E6%83%B3Y480%E6%8B%86%E6%9C%BA%E6%B8%85%E7%81%B0/"/>
      <url>/2019/03/18/%E8%81%94%E6%83%B3Y480%E6%8B%86%E6%9C%BA%E6%B8%85%E7%81%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="彻底拆机清灰（涂硅脂、更换）"><a href="#彻底拆机清灰（涂硅脂、更换）" class="headerlink" title="彻底拆机清灰（涂硅脂、更换）"></a><a href="http://ideapad.it168.com/thread-5334703-1-1.html" target="_blank" rel="noopener">彻底拆机清灰</a>（涂硅脂、更换）</h2><h2 id="清理键盘"><a href="#清理键盘" class="headerlink" title="清理键盘"></a>清理键盘</h2><ol><li>键盘在D面有<strong>两个螺丝固定</strong>，先卸下D面挡板，再卸下键盘螺丝、固定光驱的螺丝。</li><li>按照彻底拆机的拆卸键盘方法即可取下键盘。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 验机与续命 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拆机 </tag>
            
            <tag> 清灰 </tag>
            
            <tag> 保养 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑屏幕色差矫正</title>
      <link href="/2019/03/18/%E7%94%B5%E8%84%91%E5%B1%8F%E5%B9%95%E8%89%B2%E5%B7%AE%E7%9F%AB%E6%AD%A3/"/>
      <url>/2019/03/18/%E7%94%B5%E8%84%91%E5%B1%8F%E5%B9%95%E8%89%B2%E5%B7%AE%E7%9F%AB%E6%AD%A3/</url>
      
        <content type="html"><![CDATA[<ul><li>电脑屏幕色彩管理软件：LUT Manager</li><li>MAC自带的颜色配置文件：MAC.icc</li><li>适用系统：Windows  </li></ul><hr><ol><li>下载<a href="https://pan.baidu.com/s/1p1jvs2lUirS_KbFI7T7w4g" target="_blank" rel="noopener">LUT Manager和MAC.icc</a></li><li>将MAC.icc放到<code>系统盘/windows/system32/spool/drivers/color/</code>目录下</li><li>打开控制面板（查看方式-图标）- 颜色管理 - 高级 - 更改系统默认值 - 高级 - 使用Windows显示器校准 - 关闭</li><li>设备 - 显示器 - 使用我对此设备的设置 - 添加 - 选择MAC.icc - 设置为默认配置文件 - 关闭</li></ol><hr><p>参考：<a href="https://www.mooyuu.com/school/985/#downs" target="_blank" rel="noopener">矫正色差的软件</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统与软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 屏幕色差 </tag>
            
            <tag> LUT Manager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PE方式安装Windows 10</title>
      <link href="/2019/03/18/PE%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85Windows-10/"/>
      <url>/2019/03/18/PE%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85Windows-10/</url>
      
        <content type="html"><![CDATA[<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li>可以更改硬盘格式与引导方式</li><li>可以备份原有系统的数据</li><li>自带修复软件，可以在不重装系统的情况下修复系统</li></ol><hr><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>PE安装工具下载：<a href="http://www.wepe.com.cn/download.html" target="_blank" rel="noopener">微PE工具箱</a></li><li>操作系统镜像下载：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN</a></li><li><strong>8G及以上空间</strong>的U盘/移动硬盘(主要用于存放系统镜像)</li></ul><hr><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><ol><li><p>安装PE到U盘/移动硬盘</p></li><li><p>将操作系统镜像放到U盘（或移动硬盘对应的存储分区）</p></li><li><p>重启电脑，进入<strong>选择启动方式界面</strong>（联想笔记本：F12；惠普笔记本：F9）</p></li><li><p>选择PE所在设备，即启动PE</p></li><li><p>启动桌面上的<strong>Windows安装器</strong>：</p><ul><li><p>第一行：选择操作系统镜像文件</p></li><li><p>第二行（选择引导驱动器）：想要安装系统的硬盘的格式（<a href="https://www.bilibili.com/video/av45677113" target="_blank" rel="noopener">硬盘格式与引导方式、MBR与GPT、UEFI 与LEGACY bios的区别</a>）不同，需要选择的盘区也不同。</p><ol><li>GTP格式：选择ESP分区（大约90~250MB大小的一个隐藏盘区）</li><li>MBR格式：选择要装系统的盘区即可</li></ol><p><strong>两种方式都需要右边的三个指示灯不为红色（黄绿两色OK）</strong></p></li><li><p>第三行（安装磁盘的位置）：选择系统将要安装的盘区即可。</p></li><li><p>第四行：选择安装的Win 10版本。</p></li></ul><p>完成以上四行内容即可点击开始安装。</p><p>​    注：用 DiskGenius 格式化硬盘/转换硬盘格式 时记得勾选<strong>对齐分区到此扇区数的整数倍</strong>（即4K对齐，无需修改具体参数）。</p></li><li><p>重启系统，进行Win 10的初始化设置，<strong>建议进入桌面后再联网</strong>，操作过程会快一些。</p></li></ol><hr><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><p>去官网下载驱动安装，或者下载<strong>驱动精灵免安装版</strong>安装驱动（另外，Windows自身的更新会下载部分相关驱动）。</p><p>注：部分<strong>旧机型</strong>官网没有Windows10版本的相关驱动，不建议官网下载相关旧驱动，很可能不兼容。直接使用驱动精灵无脑安装基本驱动即可。</p><p>注注：博主的老机子联想Y480的触摸板在驱动精灵中没有相关的驱动，无法使用Win10的触摸板手势，但是<strong>鲁大师的驱动检测功能下可以看到触摸板驱动，选择升级即可使用手势</strong>。博主猜测此方法同样适用于部分老机型，不得不赞美一下娱乐大师。</p><p>注注注：Elitebook 830 G5的固态硬盘是三星的PM961，需要加上Turbo驱动提速，官网没有直接的链接，可以通过驱动精灵安装。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/av45170351" target="_blank" rel="noopener">Win 10全面官方装系统教程</a></p><p>dlnad</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统与软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言的基本概念</title>
      <link href="/2018/07/18/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2018/07/18/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><p>传统的C语言用法中，变量名使用小写字母，符号常量名使用大写字母</p><h2 id="类型限定符"><a href="#类型限定符" class="headerlink" title="类型限定符"></a>类型限定符</h2><p>类型限定符signed与unsigned可以用于<strong>限定char类型或任何整型</strong>。</p><ul><li><code>signed</code><br>如char类型 <code>signed char</code>，取值范围为-128~127</li><li><code>unsigned</code><br>总是正值或0，例如char类型，<code>unsigned char</code> 取值范围为0~255</li></ul><h2 id="读入、输出数据"><a href="#读入、输出数据" class="headerlink" title="读入、输出数据"></a>读入、输出数据</h2><ul><li>需要在开头写如下代码：<code>#include &lt;stdio.h&gt;</code></li></ul><p>读取数据，需要在变量名前加上<code>&amp;</code>，从而赋值给变量。</p><h3 id="EOF（End-Of-File"><a href="#EOF（End-Of-File" class="headerlink" title="EOF（End Of File)"></a>EOF（End Of File)</h3><p>可以通过<code>printf(&quot;%d&quot;, EOF);</code>读取EOF的数值，一般的设备上值是-1。<br>在程序窗口中输入<code>Ctrl + Z</code>即为EOF操作</p><h3 id="浮点数的输入输出"><a href="#浮点数的输入输出" class="headerlink" title="浮点数的输入输出"></a>浮点数的输入输出</h3><ul><li>输入：<code>scanf(&quot;%lf&quot;, ...);</code></li><li>输出：<ul><li><code>printf(&quot;%f&quot;, ...);</code> //float和double类型，printf函数都使用%f进行说明</li><li><code>printf(&quot;%ld&quot;, ...);</code> //对应long整型的参数</li></ul></li></ul><hr><ul><li><p><code>program &lt;infile</code><br>从输入文件<code>infile</code>中读取字符。</p></li><li><p><code>otherprogram | program</code><br>将程序<code>otherprogram</code>的标准输出 通过管道，重定向到程序program的标准输入上。 </p></li></ul><hr><h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>例： <code>const int AMOUNT=100;</code></p><p><code>const</code>也能配合<strong>数组参数</strong>使用，表明函数不能修改数组元素的值。</p><ul><li><code>#define</code>指令可以把 符号名 定义为一个特定的<strong>字符串</strong>，定义的内容可以是<strong>任何字符序列</strong>，不限于数字。<br><strong>末尾没有分号</strong><br><code>#define LOWER 0</code></li></ul><h2 id="字符的输入-输出"><a href="#字符的输入-输出" class="headerlink" title="字符的输入/输出"></a>字符的输入/输出</h2><ul><li><p>输入 <code>getchar()</code><br>从文本流中读入下一个输入字符，并将其作为结果值返回。</p></li><li><p>输出 <code>putchar(c)</code><br>打印一个字符</p></li></ul><h2 id="定义布尔类型"><a href="#定义布尔类型" class="headerlink" title="定义布尔类型"></a>定义布尔类型</h2><ul><li>需要在开头写如下代码：<code>#include &lt;stdbool.h&gt;</code></li></ul><p>布尔类型为<code>bool</code> (Java中为Boolean)</p><h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h2><p>例：<code>int number[100];</code> (Java中为 int[] number = new int[100];)</p><p>（C99开始，<strong>可以用变量定义数组大小</strong>；待理解）</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><hr><p><strong>C语言的编译器自上而下，按顺序分析代码</strong>。</p><p><strong>函数的先后顺序</strong>很重要。</p><hr><p>C语言的函数可以将声明和定义分离，从而顺利通过编译,如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void sum(int begin, int end); //声明，函数原型， 如果没有参数，括号内最好填写 void，更严谨</span><br><span class="line"></span><br><span class="line">int main() &#123; //main的参数部分也可以写 void</span><br><span class="line">sum(1,10);</span><br><span class="line">sum(20,30);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义</span><br><span class="line">void sum(int begin, int end) &#123;</span><br><span class="line">int i = 0;</span><br><span class="line">int sum = 0;</span><br><span class="line">for (i = begin; i &lt;= end; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d到%d的和是%d\n&quot;, begin, end, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><ul><li><p>调用函数时，<strong>给的值可以与参数类型不完全匹配</strong>，编译器自行转换类型，（Java则对类型转换要求严格）。</p></li><li><p>C语言调用函数传参数时，是<strong>值传递</strong>。</p></li></ul><h3 id="二维数组的初始化"><a href="#二维数组的初始化" class="headerlink" title="二维数组的初始化"></a>二维数组的初始化</h3><ul><li><strong>列数必须给出</strong>，行数可以交给编译器来数</li><li>每行一个<code>{}</code>，用逗号分隔<code>,</code></li><li>最后的<code>,</code>可以存在，有古老的传统</li><li><p>如果内容省略，表示补0</p></li><li><p>也可以用定位（C99 ONLY）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a[10] = &#123;</span><br><span class="line">[0] = 2, [2] = 3, 6,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>用<code>[n]</code>在初始化数据中给出定位</li><li>没有定位的数据接在前面的位置后面</li><li>其他位置的值补零</li><li>也可以不给出数组大小，让编译器算</li><li>特别适合初始数据稀疏的数组</li></ul></li></ul><h4 id="数组的大小"><a href="#数组的大小" class="headerlink" title="数组的大小"></a>数组的大小</h4><p><code>sizeof(a)/sizeof(a[0])</code></p><ul><li><code>sizeof</code>给出整个数组所占据的内容的大小，单位是字节</li><li><p><code>sizeof(a[0])</code>给出数组中单个元素的大小，相除就得到了数组的单元个数</p></li><li><p>数组作为函数的参数时 实际是指针（数组的地址）,<strong>需要用另一个参数来传入数组的大小</strong></p><ul><li>不能在<code>[]</code>中给出数组的大小</li><li>不能再利用<code>sizeof</code>来计算数组的元素个数</li></ul></li></ul><h3 id="数组的赋值"><a href="#数组的赋值" class="headerlink" title="数组的赋值"></a>数组的赋值</h3><ul><li>数组变量本身<strong>不能被赋值</strong></li><li>要把一个数组的所有元素交给另一个数组，必须采用遍历</li></ul><h2 id="指针与字符串"><a href="#指针与字符串" class="headerlink" title="指针与字符串"></a>指针与字符串</h2><ul><li><p>一元运算符<code>&amp;</code><br>获取变量的地址，它的<strong>操作数必须是变量</strong>，没有其他的运算包括其中。<br><code>p = &amp;c;</code> 称p为“指向”c的指针。</p></li><li><p>一元运算符<code>*</code><br>间接寻址运算符。<code>*</code>作用于指针时，将访问指针所指向的变量。</p></li></ul><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针就是<strong>保存地址的变量</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i;</span><br><span class="line">int *p = &amp;i;</span><br><span class="line"></span><br><span class="line">int *p,q; //*p 为指针，p为普通的int类型变量，代表地址</span><br></pre></td></tr></table></figure><h4 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h4><p>以下四种函数原型等价</p><ul><li><code>int sum(int *arr, int n);</code></li><li><code>int sum(int *, int);</code></li><li><code>int sum(int arr[], int n);</code></li><li><code>int sum(int [], int)</code></li></ul><p><strong>数组变量是特殊的指针</strong></p><ul><li>数组无需用&amp;取地址</li><li><p>数组的单元表达的是变量，需要用&amp;取地址</p></li><li><p><code>[]</code>运算符可以对数组做，也可以对指针做<br><code>p[0] &lt;==&gt; a[0]</code></p></li><li><p><code>*</code>运算符可以对指针做，也可以对数组做</p></li><li><p>数组变量是const的指针，所以不能被赋值<br><code>int a[] &lt;==&gt; int *const a=...</code></p></li></ul><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>char是一种整数，也是一种特殊的类型——字符。</p><ul><li><code>&#39;&#39;</code>也是一个字符</li><li><code>printf</code>和<code>scanf</code>里用<code>%c</code>来输入输出字符</li></ul><h3 id="逃逸字符"><a href="#逃逸字符" class="headerlink" title="逃逸字符"></a>逃逸字符</h3><table><thead><tr><th>字符</th><th>意义</th></tr></thead><tbody><tr><td><code>\b</code></td><td>回退一格</td></tr><tr><td><code>\t</code></td><td>到下一个表格位</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\r</code></td><td>回车</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\\</code></td><td>反斜杠本身</td></tr></tbody></table><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>C语言的字符串以字符数组的形态存在</p><pre><code>- 不能用运算符对字符串做运算- 通过数组的方式可以遍历字符串</code></pre><p>以整数0结尾的一串字符为字符串。（0或<code>\0</code>是一样的，但是和<code>&#39;0&#39;</code>不同）</p><ul><li><strong>0标志字符串的结束，但不是字符串的一部分</strong></li><li>字符串以数组的形式存在，以数组或<strong>指针(主)的形式访问</strong></li><li><code>string.h</code>里有很多处理字符串的函数</li></ul><h4 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char *str = &quot;Hello&quot;;</span><br><span class="line">char word[] = &quot;Hello&quot;;</span><br><span class="line">char line[10] = &quot;Hello&quot;;</span><br></pre></td></tr></table></figure><h4 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h4><p>例如：<code>Hello</code>，字符串会被编译器变成一个字符数组放在某处，这个数组的<strong>长度是5+1</strong>，结尾还有<strong>表示结束的0</strong></p><p>例：<code>char* s = &quot;Hello, world!&quot;;</code></p><ul><li>s是一个指针，初始化为指向一个字符串常量<ul><li>由于这个常量存储的地方，实际上s为<code>const char* s</code>。(历史原因，编译器接受不带const的写法)</li><li>试图对s所指的字符串做写入会导致严重的后果</li></ul></li><li>如果需要修改字符串，应该用数组：<code>char s[] = &quot;Hello, world!&quot;;</code></li></ul><p><strong>选择指针还是数组形式处理字符串？</strong></p><ul><li><p>数组（字符串就存放在当前位置，<strong>如果要构造一个字符串</strong>）</p><ul><li>作为本地变量，空间被自动回收</li></ul></li><li><p>指针（不知道字符串的存储位置，<strong>如果要处理一个字符串</strong>）</p><ul><li>处理参数</li><li>动态分配空间</li></ul></li></ul><h4 id="字符串的输入输出"><a href="#字符串的输入输出" class="headerlink" title="字符串的输入输出"></a>字符串的输入输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char string[8];</span><br><span class="line">scanf(&quot;%s&quot;, string);</span><br><span class="line">printf(&quot;%s&quot;, string);</span><br></pre></td></tr></table></figure><p>scanf读入一个单词（到空格、tab或回车为止）</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><ul><li><code>&amp;</code> 与</li><li><code>|</code> 或</li><li><code>^</code> 异或</li><li><code>~</code> 求反码</li><li><code>&gt;&gt;</code> 右移（高位出现的空位，原来高位是什么，就用什么补该空位；<code>&gt;&gt;&gt;</code>无符号右移，<strong>高位的空位用0补</strong>）</li></ul><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><ul><li><p><code>#include &quot;xxx.h&quot;</code> 函数属于某个头文件</p></li><li><p><code>#include &lt;xxx.h&gt;</code> 引用头文件</p></li></ul><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><ul><li><p>外部</p><ul><li>用<code>static</code>声明限定外部变量与函数，可以将对象的<strong>作用域限定为被编译源文件的剩余部分</strong>。</li><li>通过<code>static</code>限定外部对象，可以达到隐藏外部对象的目的。</li><li>如果把函数名声明为static类型，则该函数名除了对该函数的声明所在的文件可见外，其他文件都无法访问。</li></ul></li><li><p>内部</p><ul><li><code>static</code>类型的内部变量，不管其所在函数是否被调用，都会存在。（一直占据存储空间；自动变量：随着函数的 调用/退出 而 存在/消失）</li></ul></li></ul><h2 id="寄存器变量"><a href="#寄存器变量" class="headerlink" title="寄存器变量"></a>寄存器变量</h2><p><code>register</code>声明告诉编译器，它所声明的变量在程序中使用频率较高</p><h2 id="结构（和java中的类-概念类似-只有变量没有函数）"><a href="#结构（和java中的类-概念类似-只有变量没有函数）" class="headerlink" title="结构（和java中的类 概念类似,只有变量没有函数）"></a>结构（和java中的类 概念类似,只有变量没有函数）</h2><p>关键字<code>struct</code>引入结构声明。关键字<code>struct</code>后面的名字是可选的，称为<strong>结构标记</strong>。</p><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct point &#123;</span><br><span class="line">int x;</span><br><span class="line">int y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>struct point pt = {320, 200};</code>定义了一个struct point类型的变量pt</p><hr><h3 id="结构与函数"><a href="#结构与函数" class="headerlink" title="结构与函数"></a>结构与函数</h3><p>结构的合法操作只有几种：<strong>作为一个整体赋值和赋值（包括向函数传递参数以及从函数返回值）</strong>，通过<code>&amp;</code>运算符取地址，访问其成员。</p><p>例：函数<code>makepoint</code>，带有两个整型参数，并返回一个point类型的结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct point makepoint(int x, int y) &#123;</span><br><span class="line">struct point temp;</span><br><span class="line"></span><br><span class="line">temp.x = x;</span><br><span class="line">temp.y = y;</span><br><span class="line">return temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>结构指针</strong>的使用频度非常高，为了使用方便，C语言提供了另一种简写方式。假设<code>p</code>是一个指向结构的指针，可以用<code>p-&gt;结构成员</code>的形式（等价于<code>(*p).结构成员</code>），引用相应的结构成员。</p><p>C语言提供一个编译时的一元运算符sizeof，可以用来<strong>计算任一对象的长度</strong>。</p><p><code>sizeof 对象</code>和<code>sizeof(类型名)</code>会返回一个整型值，等于指定对象或类型<strong>占用的存储空间字节数</strong>。</p><h3 id="类型定义-typedef"><a href="#类型定义-typedef" class="headerlink" title="类型定义 (typedef)"></a>类型定义 (typedef)</h3><p><code>typedef</code>用来<strong>建立新的 数据类型名</strong>。<br>例如，声明<code>typedef int Length;</code><br>将Length定义为与int具有同等意义的名字，Length与类型int完全相同。</p><h2 id="动态分配内存"><a href="#动态分配内存" class="headerlink" title="动态分配内存"></a>动态分配内存</h2><p><code>malloc</code>函数：在需要时，向操作系统申请存储空间，需要<code>#include &lt;stdlib.h&gt;</code>。</p><p><code>void* malloc(size_t size);</code></p><ul><li>向malloc申请的空间的大小以字节为单位</li><li>返回的结果是<code>void*</code>，需要类型转换为需要的类型。例如<code>(int*)malloc(n*sizeof(int))</code></li></ul><p>因为程序中的某些地方可能不通过 malloc调用 申请空间，所以，<strong>malloc管理的空间不一定是连续的</strong>。</p><h3 id="释放空间"><a href="#释放空间" class="headerlink" title="释放空间"></a>释放空间</h3><p><code>free();</code><br><strong>malloc得到的空间一定要有free的习惯</strong></p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ul><li><p><code>strlen</code> 字符串长度<br><code>size_t strlen(const char *s);</code> 返回s的字符串长度，不包括结尾的0</p></li><li><p><code>strcmp</code> 比较字符串<br><code>int strcmp(const char *s1, char *s2);</code> 比较字符串的大小，返回两者 第一个不同的字符的差值</p></li><li><p><code>strcpy</code> 复制<br><code>char* strcpy(char *restrict dst, const char *restrict src);</code> 把src的字符串复制给dst<br><strong><code>restrict</code>表明src和dst不重叠</strong>，返回dst</p></li></ul><p>复制字符串的操作示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char *dst = (char*)malloc(strlen(src)+1);</span><br><span class="line">strcpy(dst,src);</span><br></pre></td></tr></table></figure></p><ul><li><p>字符串中找字符<br><code>char* strchr(const char *s, int c);</code><br><code>char* strrchr(const char *s, int c);</code><br>返回NULL表示没有找到</p></li><li><p>字符串中找字符串<br><code>char* strstr(const char *s1, const char *s2);</code><br><code>char* strcasestr(const char *s1, const char *s2); //忽略大小写 查找字符串</code> </p></li></ul><hr><h2 id="gets"><a href="#gets" class="headerlink" title="gets()"></a><code>gets()</code></h2><p>gets()函数包含于stdio.h头文件，会一直读取用户输入，直至换行为止；而scanf一直读至空格键</p><hr><h2 id="标准库函数-qsort排序"><a href="#标准库函数-qsort排序" class="headerlink" title="标准库函数 qsort排序"></a>标准库函数 qsort排序</h2><p>C语言有<code>qsort()</code>；C++有<code>sort()</code>；Java有<code>Arrays</code>类</p><p><code>qsort()</code>声明在stdlib.h文件中。<br><code>void qsort(void *base,size_t nelem,size_t width,int (*Comp)(const void *,const void *));</code></p><ul><li>base:<br>要排序的数组</li><li>nmemb:<br>数组中的元素数目</li><li>size:<br>每个数组元素占用内存空间，可使用sizeof获得</li><li>comp:<br>比较两个数组元素的比较函数。比较函数的第一个参数值a与参数b,<strong>此函数需要自定义</strong><ul><li>返回值 &gt; 0, a 将被排在b后面;</li><li>返回值 &lt; 0, a 将被排在b前面;</li><li>示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int cmp(const void * a, const void * b) &#123;</span><br><span class="line">//qsort的比较函数如果返回（第一个值大于第二个值时返回正数），则为递增 </span><br><span class="line">return *(long int *)a - *(long int *)b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下的一些终端操作</title>
      <link href="/2018/06/27/Ubuntu%E4%B8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%88%E7%AB%AF%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/06/27/Ubuntu%E4%B8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%88%E7%AB%AF%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="终端界面的说明"><a href="#终端界面的说明" class="headerlink" title="终端界面的说明"></a>终端界面的说明</h2><p>示例：<br><code>hunter@Hunter-PC:~$</code></p><ul><li>最左侧的<code>hunter</code>是<strong>目前用户的账号</strong></li><li>@之后的<code>Hunter-PC</code>是<strong>主机名</strong></li><li><code>~</code>是<strong>目前所在目录</strong>；<code>~</code>为<strong>当前用户的home目录</strong></li><li><code>$</code>是<strong>提示字符</strong>；root的提示符为<code>#</code>，普通用户为<code>$</code></li></ul><p>登录后取得的程序被称为<code>Shell</code>(壳，因为该程序负责最外面跟使用者沟通，被戏称称为壳程序）</p><p>在Linux下平常<strong>最好使用一般账号来登录</strong>，需要动用到系统功能修订时，再使用root。</p><hr><h2 id="操作说明及技巧"><a href="#操作说明及技巧" class="headerlink" title="操作说明及技巧"></a>操作说明及技巧</h2><p><strong>Linux严格区分大小写</strong>。</p><p>在指令列模式里面下达指令时，会有两种主要的情况：</p><ul><li>直接显示结果，然后回到命令提示字符，等待下一个指令的输入</li><li>进入到该指令的环境，直到结束该指令，回到命令提示字符的环境</li></ul><hr><ul><li>指令太长的时候，可以使用<code>\</code>使指令连续到下一行。<code>\</code>后需要立刻接<br><strong>回车</strong>，才能跳脱！</li></ul><hr><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><p><strong>Linux命令中，参数一般是无序的，特殊情况除外</strong>。</p><h3 id="安装-卸载软件"><a href="#安装-卸载软件" class="headerlink" title="安装/卸载软件"></a>安装/卸载软件</h3><p>在刚安装好Ubuntu时，应该先通过<code>sudo apt update</code>和<code>sudo apt upgrade</code>来更新系统文件。<br>然后：</p><ul><li><code>apt-get install build-essential</code>：获得各种开发工具（gcc…)</li></ul><h3 id="磁盘管理命令"><a href="#磁盘管理命令" class="headerlink" title="磁盘管理命令"></a>磁盘管理命令</h3><ul><li><p>注销Linux：<code>exit</code>(Linux本身还在运行，只是退出了登录的操作)</p></li><li><p>语系</p><ul><li>显示目前支持的语系：<br>  <code>locale</code></li><li><p>修改语系：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.utf8</span><br><span class="line">export LC_ALL=en_US.utf8</span><br></pre></td></tr></table></figure><p>LANG只与<strong>输出讯息</strong>有关，若需要更改其他不同的信息，要同步更新<code>LC_ALL</code>。</p></li></ul></li><li><p>显示日期：<code>date</code></p></li><li><p>计算器：<code>bc</code>(win10的ubuntu子系统需要先安装)<br>  事实上，该操作是<strong>进入到<code>bc</code>这个软件的工作环境</strong>。<br>  　　<code>bc</code>预设仅<strong>输出整数</strong>，如果要输出小数，需要先执行<code>scale=number</code>，<code>number</code>是小数点位数</p><ul><li>要离开<code>bc</code>，需要输入<code>quit</code>命令</li></ul></li><li><p>转换成root用户：<code>sudo su</code></p></li><li><p>展示文件和目录：<code>ls</code></p><ul><li><code>-a/--all</code> 展示当前目录下<strong>所有文件和目录</strong>（隐藏文件和特殊目录以<code>.</code>开头）</li><li><code>-l</code> 查询详细列表(可以组合使用<code>-al</code>)</li><li><code>-h</code> 友好展示信息<br><code>ls -l</code>可以简写为<code>ll</code></li></ul></li><li><p>切换目录：<code>cd</code></p><ul><li><code>~</code> 当前用户的家目录</li><li><code>/</code> 根目录</li><li><code>-</code> 切换到上次访问的目录</li></ul></li><li><p>显示当前所在目录：<code>pwd</code>(print working directory)</p></li><li><p>创建目录：<code>mkdir</code></p><ul><li><code>-p</code>(parents) 父目录不存在的情况下，生成父目录</li><li><code>-v</code> 显示命令执行过程中的详细信息</li></ul></li><li><p>删除<strong>空</strong>目录：<code>rmdir</code></p></li></ul><h3 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h3><ul><li><p>快捷查看当前文件的内容：<code>cat</code>，<strong>适合查看少量信息的文件</strong></p></li><li><p>分页显示内容，标注每行的行号：<code>less -mN</code>(<strong>适用于大量数据的查看</strong>)</p><ul><li><code>回车</code> 向下n行（需要定义，默认为1行）</li><li><code>空格</code> 向下一页</li><li><code>b</code> 向上一页</li><li><code>q</code> 退出</li></ul></li><li><p>快速查看文件后n行的内容：<code>tail -n</code>(<strong>查看日志</strong>)</p></li><li><p>复制文件/目录：<code>cp 需要复制的文件 复制的位置</code></p><ul><li><code>-r/--recursive</code> 递归处理，将指定目录下的子目录一并处理<br>示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求：把/root/Demo.java 文件复制到 /root/t1 目录中，改名为d.java</span><br><span class="line">位置：root</span><br><span class="line">命令：cp Demo.java t1/d.java</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>文件移动：<code>mv 需要移动的文件 移动的位置</code></p><ul><li><code>-f</code> 强制性覆盖</li><li><strong>文件/目录重命名操作</strong>：<code>mv 原文件 新文件名</code>（原文件名即转换为新文件名）</li></ul></li><li><p>文件/目录删除：</p><ul><li><code>rm 文件名</code><ul><li><code>-f/--force</code> 强制删除</li><li><code>-r/--recursive</code> 递归处理，将指定目录下的子目录一并处理</li></ul></li><li><code>rm -rf 目录</code></li></ul></li><li><p>查找文件或目录：<code>find [目录名] -name &#39;需要查找的字符串&#39;</code>（不填写目录名则在当前目录下查找）</p></li><li><p>压缩、解压命令：<code>tar</code></p><ul><li><code>-c</code> 建立一个压缩文件(create)</li><li><code>-x</code> 解开一个压缩文件(extract)</li><li><code>-z</code> 用gzip压缩</li><li><code>-v</code> 压缩过程中显示文件(verbose)</li><li><code>-f</code> 使用档名，在f之后要接档名(file)</li></ul></li></ul><p>Linux的压缩包格式：<code>*.tar</code>(打包不压缩)、<code>*.tar.gz</code>(打包并压缩文件大小)</p><pre><code>- 压缩：`tar -zcvf 压缩包名.tar.gz 需要压缩的内容`例如`tar -zcvf test.tar.gz *`(将当前目录下内容进行打包压缩)- 解压：`tar -zxvf 需要解压的压缩包名.tar.gz [-C 指定解压路径]`</code></pre><h3 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h3><ul><li><p>查看系统进程：<code>ps -ef</code>(Process Status) 同时会显示执行ps命令的进程信息<br>示例：<code>ps -ef | grep -i vim</code> 查看vim相关的进程</p></li><li><p>强制结束进程：<code>kill -9 pid号</code></p></li><li><p>显示网络设备：<code>ifconfig</code></p></li><li>测试和目标的连通性：<code>ping ip地址</code></li></ul><h3 id="权限命令"><a href="#权限命令" class="headerlink" title="权限命令"></a>权限命令</h3><ul><li>权限更改：<code>chmod 权限设置 需要更改权限的文件</code><ul><li><code>-R/--recursive</code> 递归处理<br>示例：</li><li>更改所属用户(user)的权限：<code>chmod u=rwx test.txt</code></li><li>更改所属组(group)的权限：<code>chmod g=rx test.txt</code></li><li>更改其他用户(other)的权限：<code>chmod o=rx test.txt</code></li><li>更改所有用户(all)的权限：<code>chmod a=r test.txt</code></li></ul></li></ul><hr><h2 id="几个重要的热键"><a href="#几个重要的热键" class="headerlink" title="几个重要的热键"></a>几个重要的热键</h2><ul><li><p><code>Tab</code><br><code>Tab</code>具有<strong>命令补全</strong>和<strong>文件补齐</strong>的功能，<strong>可以避免打错指令或文件名</strong>。</p><ul><li><code>Tab</code>接在一串指令的第一个字的后面，则为<strong>命令补全</strong></li><li><code>Tab</code>接在一串指令的第二个字以后时，则为<strong>文件补齐</strong></li></ul></li><li><p><code>Ctrl + c</code>：中断目前程序</p></li><li><p><code>Ctrl + d</code>: 键盘输入结束；也可以用来取代<code>exit</code>的输入</p></li><li><p><code>Ctrl + PgUp/PgDown</code>：翻页（指令执行后，显示的内容很长时可以用到）</p></li></ul><hr><h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><h3 id="指令名后加上-help"><a href="#指令名后加上-help" class="headerlink" title="指令名后加上--help"></a>指令名后加上<code>--help</code></h3><p>即可查看指令的用法，如<code>cal --help</code>。</p><h3 id="man-page"><a href="#man-page" class="headerlink" title="man page"></a>man page</h3><p>　　<code>man</code>是<code>manual</code>(操作说明)的简写，通过<code>man 指令名</code>进入的画面，就是<code>man page</code>。</p><p><strong>man page下</strong>能使用的相关操作：  </p><table><thead><tr><th>按键</th><th>进行工作</th></tr></thead><tbody><tr><td>空格键</td><td>向下翻一页</td></tr><tr><td>PgDn</td><td>向下翻一页</td></tr><tr><td>PgUp</td><td>向上翻一页</td></tr><tr><td>Home</td><td>去到第一页</td></tr><tr><td>End</td><td>去到最后一页</td></tr><tr><td><code>/string</code></td><td>向<strong>下</strong>搜寻string这个字符串，如果要搜寻vbird 的话，就输入/vbird</td></tr><tr><td><code>?string</code></td><td>向<strong>上</strong>搜寻string 这个字符串</td></tr><tr><td><code>n, N</code></td><td>利用<code>/</code>或<code>?</code>来查找字符串时，可以用<code>n</code>来继续下一个查找，利用<code>N</code>来进</td></tr></tbody></table><p>行<strong>反向查找</strong> |<br>| q | 结束这次的man page |</p><hr><p>示例（<code>man date</code>）:<br><img src="https://i.loli.net/2019/03/28/5c9c99ef62fbb.png" alt="man date操作之后的页面"></p><p>在页面第一行，可以看到<code>DATE(1)</code>，<code>DATE</code>是指令名称，<code>(1)</code>代表<strong>一般用户可使用的指令</strong>。</p><table><thead><tr><th style="text-align:right">代号</th><th>代表内容</th></tr></thead><tbody><tr><td style="text-align:right">1</td><td>用户在shell 环境中可以操作的指令或可执行文件</td></tr><tr><td style="text-align:right">2</td><td>系统核心可呼叫的函数与工具等</td></tr><tr><td style="text-align:right">3</td><td>一些常用的函数(function)与函式库(library)，大部分为C 的函式库(libc)</td></tr><tr><td style="text-align:right">4</td><td>装置文件的说明，通常在/dev 下的文件</td></tr><tr><td style="text-align:right">5</td><td>配置文件或者是某些文件的格式</td></tr><tr><td style="text-align:right">6</td><td>游戏(games)</td></tr><tr><td style="text-align:right">7</td><td>惯例与协议等，例如Linux 文件系统、网络协议、ASCII code 等等的说明</td></tr><tr><td style="text-align:right">8</td><td>系统管理员可用的管理指令</td></tr><tr><td style="text-align:right">9</td><td>跟kernel 有关的文件</td></tr></tbody></table><hr><p><code>man page</code>大致分成以下几个部分：</p><table><thead><tr><th>代号</th><th>内容说明</th></tr></thead><tbody><tr><td>NAME</td><td>简短的指令、数据名称说明</td></tr><tr><td>SYNOPSIS</td><td>简短的指令下达语法(syntax)简介</td></tr><tr><td>DESCRIPTION</td><td>较为完整的说明，这部分最好仔细看看！</td></tr><tr><td>OPTIONS</td><td>针对SYNOPSIS 部分中，有列举的所有可用的选项说明</td></tr><tr><td>COMMANDS</td><td>当这个程序(软件)在执行的时候，可以在此程序(软件)中下达的指令</td></tr><tr><td>FILES</td><td>这个程序或数据所使用或参考或连结到的某些文件</td></tr><tr><td>SEE ALSO</td><td>可以参考的，跟这个指令或数据有相关的其他说明！</td></tr><tr><td>EXAMPLE</td><td>一些可以参考的范例</td></tr></tbody></table><p>在查询某个数据时可以这样来查阅：</p><ol><li>先察看NAME的项目，看一下这个资料的意思</li><li>再详看一下DESCRIPTION，这个部分会提到很多相关的资料与使用时机，从这个地方可以学到很多小细节</li><li>如果这个指令已经很熟悉了，主要就是查询关于OPTIONS的部分，可以知道每个选项的意义，可以下达比较细部的指令内容</li><li>最后再看一下，跟这个资料有关的还有哪些东西可以使用。举例来说，date的<code>SEE ALSO</code>就告知我们还可以利用<code>info coreutils date</code>来进一步查阅数据；</li><li>某些说明内容还会列举有关的文件(FILES部分)来提供我们参考！这些都是很有帮助的！</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据请求的具体扩展名、请求头不同，返回不同格式的相同内容</title>
      <link href="/2018/06/14/%E6%A0%B9%E6%8D%AE%E8%AF%B7%E6%B1%82%E7%9A%84%E5%85%B7%E4%BD%93%E6%89%A9%E5%B1%95%E5%90%8D%E3%80%81%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%B8%8D%E5%90%8C%EF%BC%8C%E8%BF%94%E5%9B%9E%E4%B8%8D%E5%90%8C%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%9B%B8%E5%90%8C%E5%86%85%E5%AE%B9/"/>
      <url>/2018/06/14/%E6%A0%B9%E6%8D%AE%E8%AF%B7%E6%B1%82%E7%9A%84%E5%85%B7%E4%BD%93%E6%89%A9%E5%B1%95%E5%90%8D%E3%80%81%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%B8%8D%E5%90%8C%EF%BC%8C%E8%BF%94%E5%9B%9E%E4%B8%8D%E5%90%8C%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%9B%B8%E5%90%8C%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="内容协商多视图"><a href="#内容协商多视图" class="headerlink" title="内容协商多视图"></a>内容协商多视图</h2><p><a href="https://blog.csdn.net/yu412346928/article/details/20637439" target="_blank" rel="noopener">SpringMVC配置多视图-内容协商原理</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.ContentNegotiatingViewResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;contentNegotiationManager&quot; ref=&quot;contentNegotiationManager&quot;/&gt;</span><br><span class="line">   ...</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><a href="https://junq.io/spring-mvc%E5%AE%9E%E7%8E%B0http%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86-content-negotiation.html" target="_blank" rel="noopener">Spring MVC三种方式实现HTTP内容协商(Content Negotiation)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java Web </category>
          
          <category> Spring MVC </category>
          
          <category> 视图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视图 </tag>
            
            <tag> ContentNegotiatingViewResolver </tag>
            
            <tag> contentNegotiationManager </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
